// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  name         String
  password     String
  Task         Task[]
  Subtask      Subtask[]
  RefreshToken RefreshToken[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      Int
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subtask {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  title           String    @db.VarChar(255)
  description     String?
  status          Status    @default(TODO)
  author          User      @relation(fields: [authorId], references: [id])
  authorId        Int
  Task            Task?     @relation(fields: [taskId], references: [id])
  taskId          Int?
  parent          Subtask?  @relation("SubtaskToSubtask", fields: [parentSubtaskId], references: [id])
  parentSubtaskId Int?
  subtasks        Subtask[] @relation("SubtaskToSubtask")
}

model Task {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String    @db.VarChar(255)
  description String?
  status      Status    @default(TODO)
  Subtask     Subtask[]
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
}

enum Status {
  TODO
  INPROGRESS
  FINISHED
}
